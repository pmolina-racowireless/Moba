@page "/teams"
@attribute [Authorize]
@inject HttpClient Http

<h1>Teams</h1>

@if (teams == null)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
<div class="container">
    <div class="row">
        @foreach (var league in leagues)
        {
            <div class="col-sm">
            <h5>@league.Name</h5>
            @{
                teamsShortList = Array.FindAll(teams, t => t.LeagueId.Equals(league.LeagueId));
            }
            <TeamsShortlist Teams = "@teamsShortList" />
        </div>
        }
    </div>
</div>
        <table class="table">
        <thead>
            <tr>
                <th>Team</th>
                <th>Founded in</th>
                <th>Initials</th>
                <th>Region</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in teams)
            {
                <tr>
                    <td>@team.Name</td>
                    <td>@team.StartDate.ToShortDateString()</td>
                    <td>@team.ShortName</td>
                    <td>@team.RegionID</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    Team[] teams;
    League[] leagues;
    Team[] teamsShortList;

    protected override async Task OnInitializedAsync()
    {
        teams = await Http.GetJsonAsync<Team[]>("https://localhost:6001/team");
        leagues = await Http.GetJsonAsync<League[]>("https://localhost:6001/league");
        teamsShortList = teams;
    }

}